<?xml version="1.0" encoding="UTF-8"?>
<model version="3.0.1">
 <framework name="qpc"/>
 <package name="CalcHSM" stereotype="0x02">
  <class name="Calc" superclass="qpc::QActive">
   <attribute name="operand1" type="double" visibility="0x00" properties="0x00"/>
   <attribute name="operator" type="uint8_t" visibility="0x00" properties="0x00"/>
   <statechart>
    <initial target="../1">
     <action>BSP_message(&quot;on-INIT;&quot;);</action>
     <initial_glyph conn="3,16,5,3,2,1,2">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="On">
     <entry>BSP_message(&quot;on-ENTRY;&quot;);
ADC_IRQ_ENABLE();</entry>
     <exit>BSP_message(&quot;on-EXIT;&quot;);</exit>
     <initial target="../6">
      <action>BSP_message(&quot;ready-INIT;&quot;);</action>
      <initial_glyph conn="13,17,5,3,6">
       <action box="0,-2,6,2"/>
      </initial_glyph>
     </initial>
     <tran trig="C" target="..">
      <action>BSP_clear();</action>
      <tran_glyph conn="107,25,1,1,8,-8,-8">
       <action box="0,-2,6,2"/>
      </tran_glyph>
     </tran>
     <tran trig="OFF" target="../../2">
      <tran_glyph conn="107,32,1,0,7,16">
       <action box="0,-2,6,2"/>
      </tran_glyph>
     </tran>
     <state name="Negated1">
      <entry>BSP_message(&quot;negated1-ENTRY;&quot;);
BSP_negate();</entry>
      <exit>BSP_message(&quot;negated1-EXIT;&quot;);</exit>
      <tran trig="OPER">
       <choice>
        <guard brief="-">(((CalcEvt const *)e) -&gt;key_code == KEY_MINUS)</guard>
        <choice_glyph conn="39,58,5,-1,-4">
         <action box="-3,-2,6,2"/>
        </choice_glyph>
       </choice>
       <choice>
        <guard>else</guard>
        <action>// dirty fix
return Q_SUPER(&amp;Calc_On);</action>
        <choice_glyph conn="39,58,4,-1,-4">
         <action box="1,-6,6,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="45,58,1,-1,-6">
        <action box="-4,-2,9,2"/>
       </tran_glyph>
      </tran>
      <tran trig="CE" target="../../6/5">
       <action>BSP_clear();</action>
       <tran_glyph conn="35,63,2,3,4,-4,-42,2">
        <action box="-4,2,6,2"/>
       </tran_glyph>
      </tran>
      <tran trig="DIGIT_0" target="../../5/3">
       <action>BSP_insert(((CalcEvt const *)e)-&gt;key_code);</action>
       <tran_glyph conn="41,63,2,2,2,15,-2">
        <action box="0,0,7,2"/>
       </tran_glyph>
      </tran>
      <tran trig="DIGIT_1_9" target="../../5/4">
       <action>BSP_insert(((CalcEvt const *)e)-&gt;key_code);</action>
       <tran_glyph conn="39,63,2,2,4,29,-4">
        <action box="0,2,9,2"/>
       </tran_glyph>
      </tran>
      <tran trig="POINT" target="../../5/5">
       <action>BSP_insert(((CalcEvt const *)e)-&gt;key_code);</action>
       <tran_glyph conn="37,63,2,2,6,41,-6">
        <action box="0,4,6,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="33,49,12,14">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <state name="Operand2">
      <entry>BSP_message(&quot;operand2-ENTRY;&quot;);
display_state_trans(DS_OP);</entry>
      <exit>BSP_message(&quot;operand2-EXIT;&quot;);</exit>
      <tran trig="CE" target="../../9">
       <action>BSP_clear();
display_state_trans(DS_OP1);</action>
       <tran_glyph conn="54,111,2,0,2,-44,-68,9,4">
        <action box="-3,0,6,2"/>
       </tran_glyph>
      </tran>
      <tran trig="OPER">
       <choice target="../../../9">
        <guard brief="isValid">BSP_eval(me-&gt;operand1, me-&gt;operator, BSP_get_value())</guard>
        <action>me-&gt;operand1 = BSP_get_value();
me-&gt;operator = ((CalcEvt const *)e)-&gt;key_code;
display_state_trans(DS_OP2);</action>
        <choice_glyph conn="57,117,5,0,-48,-73,11,5">
         <action box="-7,-2,10,2"/>
        </choice_glyph>
       </choice>
       <choice target="../../../7">
        <guard>else</guard>
        <choice_glyph conn="57,117,5,0,37,-20,5,3">
         <action box="2,-2,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="57,111,2,-1,6">
        <action box="0,1,6,2"/>
       </tran_glyph>
      </tran>
      <tran trig="EQUALS">
       <choice target="../../../6/6">
        <guard brief="isValid">BSP_eval(me-&gt;operand1, me-&gt;operator, BSP_get_value())</guard>
        <choice_glyph conn="97,95,4,2,-65">
         <action box="0,-3,10,2"/>
        </choice_glyph>
       </choice>
       <choice target="../../../7">
        <guard>else</guard>
        <choice_glyph conn="97,95,5,0,5,5">
         <action box="1,0,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="71,111,2,-1,4,21,-20,5">
        <action box="0,1,6,2"/>
       </tran_glyph>
      </tran>
      <state name="Frac2">
       <entry>BSP_message(&quot;frac2-ENTRY;&quot;);</entry>
       <exit>BSP_message(&quot;frac2-EXIT;&quot;);</exit>
       <tran trig="DIGIT_0">
        <action>BSP_insert(((CalcEvt const *)e)-&gt;key_code);</action>
        <tran_glyph conn="74,96,3,-1,7">
         <action box="0,-2,6,2"/>
        </tran_glyph>
       </tran>
       <tran trig="DIGIT_1_9">
        <action>BSP_insert(((CalcEvt const *)e)-&gt;key_code);</action>
        <tran_glyph conn="74,98,3,-1,7">
         <action box="0,-2,8,2"/>
        </tran_glyph>
       </tran>
       <tran trig="POINT">
        <tran_glyph conn="74,100,3,-1,7">
         <action box="0,-2,6,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="74,88,9,14">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state name="Zero2">
       <entry>BSP_message(&quot;zero2-ENTRY;&quot;);</entry>
       <exit>BSP_message(&quot;zero1-EXIT;&quot;);</exit>
       <tran trig="DIGIT_0">
        <tran_glyph conn="52,97,3,-1,7">
         <action box="0,-2,6,2"/>
        </tran_glyph>
       </tran>
       <tran trig="DIGIT_1_9" target="../../5">
        <action>BSP_insert(((CalcEvt const *)e)-&gt;key_code);</action>
        <tran_glyph conn="58,102,2,2,3,8,-3">
         <action box="0,1,9,2"/>
        </tran_glyph>
       </tran>
       <tran trig="POINT" target="../../3">
        <action>BSP_insert(((CalcEvt const *)e)-&gt;key_code);</action>
        <tran_glyph conn="59,88,0,0,-4,19,4">
         <action box="0,-4,5,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="52,88,9,14">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state name="Int2">
       <entry>BSP_message(&quot;int2-ENTRY;&quot;);</entry>
       <exit>BSP_message(&quot;int2-EXIT;&quot;);</exit>
       <tran trig="DIGIT_0">
        <action>BSP_insert(((CalcEvt const *)e)-&gt;key_code);</action>
        <tran_glyph conn="63,97,3,-1,7">
         <action box="0,-2,6,2"/>
        </tran_glyph>
       </tran>
       <tran trig="DIGIT_1_9">
        <action>BSP_insert(((CalcEvt const *)e)-&gt;key_code);</action>
        <tran_glyph conn="63,100,3,-1,7">
         <action box="0,-2,8,2"/>
        </tran_glyph>
       </tran>
       <tran trig="POINT" target="../../3">
        <action>BSP_insert(((CalcEvt const *)e)-&gt;key_code);</action>
        <tran_glyph conn="69,88,0,0,-2,7,2">
         <action box="1,-2,6,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="63,88,9,14">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state_glyph node="50,80,35,31">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <state name="Operand1">
      <entry>BSP_message(&quot;operand1-ENTRY;&quot;);</entry>
      <exit>BSP_message(&quot;operand1-EXIT;&quot;);</exit>
      <tran trig="CE" target="../../6/5">
       <action>BSP_clear();</action>
       <tran_glyph conn="85,52,1,1,3,-27,-13">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <tran trig="OPER" target="../../9">
       <action>me-&gt;operand1 = BSP_get_value();
me-&gt;operator = ((CalcEvt const *)e)-&gt;key_code;
display_state_trans(DS_OP1);</action>
       <tran_glyph conn="65,71,2,0,2,-36,-29,-5,5">
        <action box="-36,0,6,2"/>
       </tran_glyph>
      </tran>
      <tran trig="EQUALS" target="../../6/6">
       <tran_glyph conn="70,71,2,2,2,25,-43">
        <action box="0,0,6,2"/>
       </tran_glyph>
      </tran>
      <state name="Zero1">
       <entry>BSP_message(&quot;zero1-ENTRY;&quot;);</entry>
       <exit>BSP_message(&quot;zero1-EXIT;&quot;);</exit>
       <tran trig="DIGIT_0">
        <tran_glyph conn="52,58,3,-1,7">
         <action box="0,-2,6,2"/>
        </tran_glyph>
       </tran>
       <tran trig="DIGIT_1_9" target="../../4">
        <action>BSP_insert(((CalcEvt const *)e)-&gt;key_code);</action>
        <tran_glyph conn="58,63,2,2,2,8,-2">
         <action box="0,0,9,2"/>
        </tran_glyph>
       </tran>
       <tran trig="POINT" target="../../5">
        <action>BSP_insert(((CalcEvt const *)e)-&gt;key_code);</action>
        <tran_glyph conn="59,49,0,0,-4,19,4">
         <action box="0,-4,6,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="52,49,9,14">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state name="Int1">
       <entry>BSP_message(&quot;int1-ENTRY;&quot;);</entry>
       <exit>BSP_message(&quot;int1-EXIT;&quot;);</exit>
       <tran trig="DIGIT_0">
        <action>BSP_insert(((CalcEvt const *)e)-&gt;key_code);</action>
        <tran_glyph conn="63,58,3,-1,7">
         <action box="0,-2,6,2"/>
        </tran_glyph>
       </tran>
       <tran trig="DIGIT_1_9">
        <action>BSP_insert(((CalcEvt const *)e)-&gt;key_code);</action>
        <tran_glyph conn="63,61,3,-1,7">
         <action box="0,-2,8,2"/>
        </tran_glyph>
       </tran>
       <tran trig="POINT" target="../../5">
        <action>BSP_insert(((CalcEvt const *)e)-&gt;key_code);</action>
        <tran_glyph conn="69,49,0,0,-2,7,2">
         <action box="1,-2,6,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="63,49,9,14">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state name="Frac1">
       <entry>BSP_message(&quot;frac1-ENTRY;&quot;);</entry>
       <exit>BSP_message(&quot;frac1-EXIT;&quot;);</exit>
       <tran trig="DIGIT_0">
        <action>BSP_insert(((CalcEvt const *)e)-&gt;key_code);</action>
        <tran_glyph conn="74,57,3,-1,7">
         <action box="0,-2,6,2"/>
        </tran_glyph>
       </tran>
       <tran trig="DIGIT_1_9">
        <action>BSP_insert(((CalcEvt const *)e)-&gt;key_code);</action>
        <tran_glyph conn="74,59,3,-1,7">
         <action box="0,-2,8,2"/>
        </tran_glyph>
       </tran>
       <tran trig="POINT">
        <tran_glyph conn="74,61,3,-1,7">
         <action box="0,-2,6,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="74,49,9,14">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state_glyph node="50,41,35,30">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <state name="Ready">
      <entry>BSP_message(&quot;ready-ENTRY;&quot;);</entry>
      <exit>BSP_message(&quot;ready-EXIT;&quot;);</exit>
      <initial target="../5">
       <action>BSP_message(&quot;ready-INIT;&quot;);</action>
       <initial_glyph conn="23,23,5,3,10">
        <action box="0,-2,6,2"/>
       </initial_glyph>
      </initial>
      <tran trig="DIGIT_0" target="../../5/3">
       <action>BSP_clear();</action>
       <tran_glyph conn="56,32,2,0,17">
        <action box="0,1,11,2"/>
       </tran_glyph>
      </tran>
      <tran trig="DIGIT_1_9" target="../../5/4">
       <action>BSP_clear();
BSP_insert(((CalcEvt const *)e)-&gt;key_code);</action>
       <tran_glyph conn="65,32,2,0,17">
        <action box="0,1,11,2"/>
       </tran_glyph>
      </tran>
      <tran trig="POINT" target="../../5/5">
       <action>BSP_clear();
BSP_insert((int)'0');
BSP_insert((int)'.');</action>
       <tran_glyph conn="80,32,2,0,17">
        <action box="0,1,8,2"/>
       </tran_glyph>
      </tran>
      <tran trig="OPER" target="../../9">
       <action>me-&gt;operand1 = BSP_get_value();
me-&gt;operator = ((CalcEvt const *)e)-&gt;key_code;</action>
       <tran_glyph conn="22,32,2,0,17">
        <action box="0,1,9,2"/>
       </tran_glyph>
      </tran>
      <state name="Begin">
       <entry>BSP_message(&quot;begin-ENTRY;&quot;);
clear();</entry>
       <exit>BSP_message(&quot;begin-EXIT;&quot;);</exit>
       <tran trig="OPER">
        <choice target="../../../../3">
         <guard brief="-">(((CalcEvt const *)e) -&gt;key_code == KEY_MINUS)</guard>
         <choice_glyph conn="38,37,4,0,12">
          <action box="0,1,6,3"/>
         </choice_glyph>
        </choice>
        <choice>
         <guard>else</guard>
         <action>// dirty fix
return Q_SUPER(&amp;Calc_Ready);</action>
         <choice_glyph conn="38,37,5,-1,8">
          <action box="5,-2,6,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="38,28,2,-1,9">
         <action box="0,5,6,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="33,20,42,8">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state name="Result">
       <entry>BSP_message(&quot;result-ENTRY;&quot;);
display_state_trans(DS_OP2);</entry>
       <exit>BSP_message(&quot;result-EXIT;&quot;);</exit>
       <state_glyph node="92,19,8,11">
        <entry box="1,2,6,2"/>
        <exit box="1,4,6,2"/>
       </state_glyph>
      </state>
      <state_glyph node="19,14,83,18">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <state name="Error">
      <entry>BSP_message(&quot;error-ENTRY;&quot;);
display_state_trans(DS_ERR);</entry>
      <exit>BSP_message(&quot;error-EXIT;&quot;);</exit>
      <state_glyph node="96,100,9,11">
       <entry box="1,2,6,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <state name="Negated2">
      <entry>BSP_message(&quot;negated2-ENTRY;&quot;);
BSP_negate();</entry>
      <exit>BSP_message(&quot;negated2-EXIT;&quot;);</exit>
      <tran trig="OPER">
       <choice>
        <guard brief="-">(((CalcEvt const *)e) -&gt;key_code == KEY_MINUS)</guard>
        <choice_glyph conn="21,99,5,-1,-4">
         <action box="-3,-2,6,2"/>
        </choice_glyph>
       </choice>
       <choice>
        <guard>else</guard>
        <action>// dirty fix
return Q_SUPER(&amp;Calc_On);</action>
        <choice_glyph conn="21,99,4,-1,-4">
         <action box="1,-5,6,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="27,99,1,-1,-6">
        <action box="-4,-2,9,2"/>
       </tran_glyph>
      </tran>
      <tran trig="CE" target="../../9">
       <action>BSP_clear();
display_state_trans(DS_OP1);</action>
       <tran_glyph conn="17,103,2,0,3,-6,-59,7,2">
        <action box="-6,1,6,2"/>
       </tran_glyph>
      </tran>
      <tran trig="DIGIT_0" target="../../4/4">
       <tran_glyph conn="23,103,2,2,3,33,-4">
        <action box="0,1,7,2"/>
       </tran_glyph>
      </tran>
      <tran trig="DIGIT_1_9" target="../../4/5">
       <action>BSP_insert(((CalcEvt const *)e)-&gt;key_code);</action>
       <tran_glyph conn="21,103,2,2,5,48,-6">
        <action box="0,3,9,2"/>
       </tran_glyph>
      </tran>
      <tran trig="POINT" target="../../4/3">
       <action>BSP_insert(((CalcEvt const *)e)-&gt;key_code);</action>
       <tran_glyph conn="19,103,2,2,7,59,-8">
        <action box="0,5,6,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="15,89,12,14">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <state name="OpEntered">
      <entry>BSP_message(&quot;opEntered-ENTRY;&quot;);
BSP_insert(me-&gt;operator);</entry>
      <exit>BSP_message(&quot;opEntered-EXIT;&quot;);</exit>
      <tran trig="OPER">
       <choice target="../../../8">
        <guard brief="-">(((CalcEvt const *)e) -&gt;key_code == KEY_MINUS)</guard>
        <action>BSP_clear();</action>
        <choice_glyph conn="17,69,4,0,20">
         <action box="-3,1,6,2"/>
        </choice_glyph>
       </choice>
       <choice>
        <guard>else</guard>
        <action>// dirty fix
return Q_SUPER(&amp;Calc_On);</action>
        <choice_glyph conn="17,69,5,-1,-4">
         <action box="-6,-3,6,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="17,63,2,-1,6">
        <action box="-4,1,9,2"/>
       </tran_glyph>
      </tran>
      <tran trig="DIGIT_0" target="../../4/4">
       <action>BSP_clear();</action>
       <tran_glyph conn="19,63,2,0,16,37,9">
        <action box="0,14,6,2"/>
       </tran_glyph>
      </tran>
      <tran trig="DIGIT_1_9" target="../../4/5">
       <action>BSP_clear();
BSP_insert(((CalcEvt const *)e)-&gt;key_code);</action>
       <tran_glyph conn="21,63,2,0,14,44,11">
        <action box="0,12,9,2"/>
       </tran_glyph>
      </tran>
      <tran trig="POINT" target="../../4/3">
       <action>BSP_clear();
BSP_insert((int)'0');
BSP_insert((int)'.');</action>
       <tran_glyph conn="23,63,2,0,12,57,13">
        <action box="0,10,6,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="15,49,12,14">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <state_glyph node="7,7,100,114">
      <entry box="1,2,5,2"/>
      <exit box="1,4,5,2"/>
     </state_glyph>
    </state>
    <state name="Final">
     <entry>BSP_message(&quot;final-ENTRY;&quot;);
BSP_exit();</entry>
     <state_glyph node="108,48,12,14">
      <entry box="1,2,5,2"/>
     </state_glyph>
    </state>
    <state_diagram size="130,124"/>
   </statechart>
  </class>
  <operation name="Calc_ctor" type="void" visibility="0x00" properties="0x00">
   <parameter name="me" type="Calc*"/>
   <code>QActive_ctor(&amp;me-&gt;super, (QStateHandler)&amp;Calc_initial);</code>
  </operation>
  <directory name=".\src">
   <file name="main.c" codec="UTF-8">
    <text>/*****************************************************************************
* Model: calc.qm
* File:  .\src/main.c
*
* This code has been generated by QM tool (see state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*****************************************************************************/
/* @(/1/3/0) ...............................................................*/
/*****************************************************************************
* Product: Calculator Example with inheritance of whole state model
* Last Updated for Version: 4.0.01
* Date of the Last Update:  Sep 23, 2008
*
*                    Q u a n t u m     L e a P s
*                    ---------------------------
*                    innovating embedded systems
*
* Copyright (C) 2002-2008 Quantum Leaps, LLC. All rights reserved.
*
* This software may be distributed and modified under the terms of the GNU
* General Public License version 2 (GPL) as published by the Free Software
* Foundation and appearing in the file GPL.TXT included in the packaging of
* this file. Please note that GPL Section 2[b] requires that all works based
* on this software must also be made publicly available under the terms of
* the GPL (&quot;Copyleft&quot;).
*
* Alternatively, this software may be distributed and modified under the
* terms of Quantum Leaps commercial licenses, which expressly supersede
* the GPL and are specifically designed for licensees interested in
* retaining the proprietary status of their code.
*
* Contact information:
* Quantum Leaps Web site:  http://www.quantum-leaps.com
* e-mail:                  info@quantum-leaps.com
*****************************************************************************/

#include &quot;qp_port.h&quot;                        /* the port of the QP framework */
#include &quot;bsp.h&quot;                                   /* board support package */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#define SIZE_OF_EVENT_QUEUE 128

QEvt const *l_eventQueue[SIZE_OF_EVENT_QUEUE];    /* Event queue storage for print time */


// Local objects -----------------------------------------------------------*/
static Calc l_calc;                             /* instantiate Calculator2 */


//..........................................................................*/
int main() {
    QF_init();    /* initialize the framework and the underlying RT kernel */
    Calc_ctor(&amp;l_calc);    /* explicitly instantiate the calculator object */
    QF_poolInit((void *) &amp;l_eventQueue, sizeof(l_eventQueue), sizeof(l_eventQueue[0]));
    QActive_start((QActive * ) &amp; l_calc, 1, l_eventQueue, Q_DIM(l_eventQueue), (void *) 0, 0, (QEvt *) 0);
    BSP_Init(&amp;l_calc);

    printf(&quot;Calculator example, QEP version: %s\n&quot;
           &quot;Press '0' .. '9'     to enter a digit\n&quot;
           &quot;Press '.'            to enter the decimal point\n&quot;
           &quot;Press '+'            to add\n&quot;
           &quot;Press '-'            to subtract or negate a number\n&quot;
           &quot;Press '*'            to multiply\n&quot;
           &quot;Press '/'            to divide\n&quot;
           &quot;Press '=' or &lt;Enter&gt; to get the result\n&quot;
           &quot;Press 'c' or 'C'     to Cancel\n&quot;
           &quot;Press 'e' or 'E'     to Cancel Entry\n&quot;
           &quot;Press &lt;Esc&gt;          to quit.\n\n&quot;,
           QEP_getVersion());

    QF_run();                                     /* run the QF application */
}

</text>
   </file>
   <file name="calc.c">
    <text>#include &quot;calc.h&quot;                                   /* board support package */
#include &quot;bsp.h&quot;

$define(CalcHSM::Calc)


$define(CalcHSM::Calc_ctor)</text>
   </file>
   <file name="calc.h">
    <text>#ifndef BLINKY_2_H
#define BLINKY_2_H

#include &quot;qep_port.h&quot;
#include &quot;qp_port.h&quot;


enum CalcSignals {
    C_SIG = Q_USER_SIG,
    CE_SIG,
    DIGIT_0_SIG,
    DIGIT_1_9_SIG,
    POINT_SIG,
    OPER_SIG,
    EQUALS_SIG,
    OFF_SIG,
    PERCENT_SIG,

    MAX_CALC1_SIG
};


$declare(CalcHSM::Calc)
$declare(CalcHSM::Calc_ctor)

$declare(Events::CalcEvt)

#endif</text>
   </file>
  </directory>
 </package>
 <package name="Events" stereotype="0x01">
  <class name="CalcEvt" superclass="qpc::QEvt">
   <attribute name="key_code" type="uint8_t" visibility="0x00" properties="0x00"/>
  </class>
 </package>
</model>
