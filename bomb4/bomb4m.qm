<<<<<<< .mine
<?xml version="1.0" encoding="UTF-8"?>
<model version="3.0.1">
 <documentation>Simple model template for QP/C</documentation>
 <framework name="qpc"/>
 <package name="Events" stereotype="0x01">
  <class name="TickEvt" superclass="qpc::QEvt">
   <attribute name="fine_time" type="uint8_t" visibility="0x02" properties="0x00"/>
  </class>
 </package>
 <package name="Bomb4FSM" stereotype="0x02">
  <class name="Bomb4" superclass="qpc::QFsm">
   <documentation>Example for a UML Moddled Framework Event Driven System</documentation>
   <attribute name="timeout" type="uint16_t" visibility="0x02" properties="0x00"/>
   <attribute name="code" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="defuse" type="uint8_t" visibility="0x00" properties="0x00"/>
   <statechart>
    <initial target="../1">
     <initial_glyph conn="4,28,5,3,11">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="setting">
     <tran trig="ARM" target="../../2">
      <action>me-&gt;code = 0;</action>
      <tran_glyph conn="18,32,2,0,5">
       <action box="0,1,6,2"/>
      </tran_glyph>
     </tran>
     <tran trig="DOWN" target="..">
      <action brief="down()">if (me-&gt;timeout &gt; 1) {
    --me-&gt;timeout;
    BSP_display(me-&gt;timeout);
}</action>
      <tran_glyph conn="30,28,1,1,11,2,-11">
       <action box="0,-2,12,2"/>
      </tran_glyph>
     </tran>
     <tran trig="UP" target="..">
      <action brief="up()">if (me-&gt;timeout &lt; 60) {
    ++me-&gt;timeout;
    BSP_display(me-&gt;timeout);
}</action>
      <tran_glyph conn="25,25,0,0,-9,2,9">
       <action box="3,-9,10,7"/>
      </tran_glyph>
     </tran>
     <state_glyph node="15,25,15,7"/>
    </state>
    <state name="timing">
     <tran trig="UP" target="..">
      <action brief="up()">me-&gt;code &lt;&lt;= 1;
me-&gt;code |= 1;</action>
      <tran_glyph conn="21,46,2,2,6,-3,-6">
       <action box="-10,4,10,7"/>
      </tran_glyph>
     </tran>
     <tran trig="DOWN" target="..">
      <action brief="down()">me-&gt;code &lt;&lt;= 1;</action>
      <tran_glyph conn="26,46,2,2,6,-2,-6">
       <action box="2,4,12,2"/>
      </tran_glyph>
     </tran>
     <tran trig="TICK">
      <choice>
       <guard brief="fine_time">((TickEvt const *)e)-&gt;fine_time == 0</guard>
       <action>--me-&gt;timeout;
BSP_display(me-&gt;timeout);</action>
       <choice target="../../../../3">
        <guard brief="BOOM!!">me-&gt;timeout &lt;= 0</guard>
        <choice_glyph conn="49,40,5,3,26">
         <action box="6,-2,6,2"/>
        </choice_glyph>
       </choice>
       <choice target="../../../../1">
        <guard brief="isDisarmed">me-&gt;code == me-&gt;defuse &amp;&amp; me-&gt;timeout &gt; 0</guard>
        <choice_glyph conn="49,40,4,2,-5,-22,-3">
         <action box="-7,-7,11,2"/>
        </choice_glyph>
       </choice>
       <choice target="../../..">
        <guard brief="isNotDisarmed">else</guard>
        <choice_glyph conn="49,40,4,1,4,-19">
         <action box="-5,4,11,2"/>
        </choice_glyph>
       </choice>
       <choice_glyph conn="39,40,5,-1,10">
        <action box="1,0,8,3"/>
       </choice_glyph>
      </choice>
      <choice target="../..">
       <guard>else</guard>
       <choice_glyph conn="39,40,4,1,2,-9">
        <action box="-7,2,6,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="30,40,1,-1,9">
       <action box="0,-2,6,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="15,37,15,9"/>
    </state>
    <state name="BAM">
     <entry brief="boom()">BSP_boom();</entry>
     <state_glyph node="75,36,12,7">
      <entry box="1,2,11,2"/>
     </state_glyph>
    </state>
    <state_diagram size="121,78"/>
   </statechart>
  </class>
  <operation name="Bomb4_ctor" type="void" visibility="0x00" properties="0x00">
   <parameter name="me" type="Bomb4 *"/>
   <parameter name="defuse" type="uint8_t"/>
   <code>   QFsm_ctor(&amp;me-&gt;super, (QStateHandler)&amp;Bomb4_initial);/* superclass ctor */
    me-&gt;defuse = defuse;    /* the defuse code is assigned at instantiation */</code>
  </operation>
 </package>
 <directory name="..\bomb4\src">
  <file name="bom4_a.c">
   <text>#include &quot;qep_port.h&quot;                /* the port of the QEP event processor */
#include &quot;bomb4_a.h&quot;                                   /* board support package */





$define(Bomb4FSM::Bomb4)


$define(Bomb4FSM::Bomb4_ctor)



</text>
  </file>
  <file name="bomb4_a.h">
   <text>/*  Event driver Systems - University of Munich  - SS 2014 */


#include &quot;bombqmbsp.h&quot; 


#define INIT_TIMEOUT   10

enum BombSignals {                          /* all signals for the Bomb FSM */
    UP_SIG = Q_USER_SIG,
    DOWN_SIG,
    ARM_SIG,
    TICK_SIG
};


$declare(Bomb4FSM::Bomb4)
$declare(Bomb4FSM::Bomb4_ctor)
$declare(Events::TickEvt)

</text>
  </file>
  <file name="main.c">
   <text>#include &quot;qep_port.h&quot;                /* the port of the QEP event processor */
#include &quot;bomb4_a.h&quot;                                   /* board support package */

#include &lt;stdio.h&gt;

#include &lt;stdlib.h&gt;                                          /* for _exit() */

static Bomb4 l_bomb;                                       /* time bomb FSM */

/*..........................................................................*/
int main() {

   
   BSP_Init();
   Bomb4_ctor(&amp;l_bomb, 0x0D);       /* the secret defuse code, 1101 binary */

    printf(&quot;Time Bomb (QEP QFsm class)\n&quot;
           &quot;Press 'u'   for UP   event\n&quot;
           &quot;Press 'd'   for DOWN event\n&quot;
           &quot;Press 'a'   for ARM  event\n&quot;
           &quot;Press &lt;Esc&gt; to quit.\n&quot;);
    

    QFsm_init_((QFsm *)&amp;l_bomb, (QEvt *)0); /* take the initial transition */

    for (;;) {                                                /* event loop */
        static TickEvt tick_evt = { TICK_SIG, 0, 0};

        BSP_delay(BSP_TICKS_PER_SEC);                                         /* 100 ms delay */

        if (++tick_evt.fine_time == 10) {
            tick_evt.fine_time = 0;
        }
        printf(&quot;T(%1d)%c&quot;, tick_evt.fine_time,
                             (tick_evt.fine_time == 0) ? '\n' : ' ');

        QFsm_dispatch_((QFsm *)&amp;l_bomb, (QEvt *)&amp;tick_evt);

        if (kbhit()) {
            static QEvt const up_evt   = { UP_SIG,   0 };
            static QEvt const down_evt = { DOWN_SIG, 0 };
            static QEvt const arm_evt  = { ARM_SIG,  0 };
            QEvt const *e = (QEvt *)0;

            switch (getchar()) {
                case 'u': {                                     /* UP event */
                    printf(&quot;\nUP  : &quot;);
                    e = &amp;up_evt;                   /* generate the UP event */
                    break;
                }
                case 'd': {                                   /* DOWN event */
                    printf(&quot;\nDOWN: &quot;);
                    e = &amp;down_evt;               /* generate the DOWN event */
                    break;
                }
                case 'a': {                                    /* ARM event */
                    printf(&quot;\nARM : &quot;);
                    e = &amp;arm_evt;                 /* generate the ARM event */
                    break;
                }
                case '\33': {                                  /* &lt;Esc&gt; key */
                    printf(&quot;\nESC : Bye! Bye!&quot;);
                    fflush(stdout);
                 
                    _sys_exit(0);
                }
            }
            if (e != (QEvt *)0) {            /* keyboard event available? */
                QFsm_dispatch_((QFsm *)&amp;l_bomb, e);    /* dispatch the event */
            }
        }
    }

 
}
</text>
  </file>
 </directory>
</model>
=======
<?xml version="1.0" encoding="UTF-8"?>
<model version="3.0.1">
 <documentation>Simple model template for QP/C</documentation>
 <framework name="qpc"/>
 <package name="Events" stereotype="0x01">
  <class name="TickEvt" superclass="qpc::QEvt">
   <attribute name="fine_time" type="uint8_t" visibility="0x02" properties="0x00"/>
  </class>
 </package>
 <package name="Bomb4FSM" stereotype="0x02">
  <class name="Bomb4" superclass="qpc::QFsm">
   <documentation>Example for a UML Moddled Framework Event Driven System</documentation>
   <attribute name="timeout" type="uint16_t" visibility="0x02" properties="0x00"/>
   <attribute name="code" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="defuse" type="uint8_t" visibility="0x00" properties="0x00"/>
   <statechart>
    <initial target="../1">
     <initial_glyph conn="17,9,5,3,5,11,2">
      <action box="0,-2,4,5"/>
     </initial_glyph>
    </initial>
    <state name="state1">
     <tran trig="TRIG1">
      <choice>
       <guard>guard1</guard>
       <choice_glyph conn="40,20,4,-1,4">
        <action box="1,0,6,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="47,20,1,-1,-7">
       <action box="0,-2,6,2"/>
      </tran_glyph>
     </tran>
     <tran trig="TRIG2" target="../../2">
      <tran_glyph conn="47,22,1,3,15,1,2">
       <action box="0,-2,6,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="24,13,23,12"/>
    </state>
    <state name="state2">
     <state_glyph node="64,13,20,15"/>
    </state>
    <state_diagram size="103,50"/>
   </statechart>
  </class>
  <operation name="Bomb4_ctor" type="void" visibility="0x00" properties="0x00">
   <parameter name="me" type="Bomb4 *"/>
   <parameter name="defuse" type="uint8_t"/>
   <code>   QFsm_ctor(&amp;me-&gt;super, (QStateHandler)&amp;Bomb4_initial);/* superclass ctor */
    me-&gt;defuse = defuse;    /* the defuse code is assigned at instantiation */</code>
  </operation>
 </package>
 <directory name="..\bomb4\src">
  <file name="bom4_a.c">
   <text>#include &quot;qep_port.h&quot;                /* the port of the QEP event processor */
#include &quot;bomb4_a.h&quot;                                   /* board support package */





$define(Bomb4FSM::Bomb4)


$define(Bomb4FSM::Bomb4_ctor)



</text>
  </file>
  <file name="bomb4_a.h">
   <text>/*  Event driver Systems - University of Munich  - SS 2014 */


#include &quot;bombqmbsp.h&quot; 


#define INIT_TIMEOUT   10

enum BombSignals {                          /* all signals for the Bomb FSM */
    UP_SIG = Q_USER_SIG,
    DOWN_SIG,
    ARM_SIG,
    TICK_SIG
};


$declare(Bomb4FSM::Bomb4)
$declare(Bomb4FSM::Bomb4_ctor)
$declare(Events::TickEvt)

</text>
  </file>
  <file name="main.c">
   <text>#include &quot;qep_port.h&quot;                /* the port of the QEP event processor */
#include &quot;bomb4_a.h&quot;                                   /* board support package */

#include &lt;stdio.h&gt;

#include &lt;stdlib.h&gt;                                          /* for _exit() */

static Bomb4 l_bomb;                                       /* time bomb FSM */

/*..........................................................................*/
int main() {

   
   BSP_Init();
   Bomb4_ctor(&amp;l_bomb, 0x0D);       /* the secret defuse code, 1101 binary */

    printf(&quot;Time Bomb (QEP QFsm class)\n&quot;
           &quot;Press 'u'   for UP   event\n&quot;
           &quot;Press 'd'   for DOWN event\n&quot;
           &quot;Press 'a'   for ARM  event\n&quot;
           &quot;Press &lt;Esc&gt; to quit.\n&quot;);
    

    QFsm_init_((QFsm *)&amp;l_bomb, (QEvt *)0); /* take the initial transition */

    for (;;) {                                                /* event loop */
        static TickEvt tick_evt = { TICK_SIG, 0, 0};

        BSP_delay(BSP_TICKS_PER_SEC);                                         /* 100 ms delay */

        if (++tick_evt.fine_time == 10) {
            tick_evt.fine_time = 0;
        }
        printf(&quot;T(%1d)%c&quot;, tick_evt.fine_time,
                             (tick_evt.fine_time == 0) ? '\n' : ' ');

        QFsm_dispatch_((QFsm *)&amp;l_bomb, (QEvt *)&amp;tick_evt);

        if (kbhit()) {
            static QEvt const up_evt   = { UP_SIG,   0 };
            static QEvt const down_evt = { DOWN_SIG, 0 };
            static QEvt const arm_evt  = { ARM_SIG,  0 };
            QEvt const *e = (QEvt *)0;

            switch (getchar()) {
                case 'u': {                                     /* UP event */
                    printf(&quot;\nUP  : &quot;);
                    e = &amp;up_evt;                   /* generate the UP event */
                    break;
                }
                case 'd': {                                   /* DOWN event */
                    printf(&quot;\nDOWN: &quot;);
                    e = &amp;down_evt;               /* generate the DOWN event */
                    break;
                }
                case 'a': {                                    /* ARM event */
                    printf(&quot;\nARM : &quot;);
                    e = &amp;arm_evt;                 /* generate the ARM event */
                    break;
                }
                case '\33': {                                  /* &lt;Esc&gt; key */
                    printf(&quot;\nESC : Bye! Bye!&quot;);
                    fflush(stdout);
                 
                    _sys_exit(0);
                }
            }
            if (e != (QEvt *)0) {            /* keyboard event available? */
                QFsm_dispatch_((QFsm *)&amp;l_bomb, e);    /* dispatch the event */
            }
        }
    }

 
}
</text>
  </file>
 </directory>
</model>
>>>>>>> .r36
